import numpy as np
import pandas as pd

# 1D Data Aggregation
def one_dimensional_aggregation():
    # Generate a 1D array of 100 random values between 0 and 10
    data_1d = np.random.uniform(0, 10, 100)

    # Create a pandas Series
    series_1d = pd.Series(data_1d)

    # Applying aggregation functions
    print("1D Data Aggregation:")
    print(f"Count: {series_1d.count()}")
    print(f"First: {series_1d.first()}")
    print(f"Last: {series_1d.last()}")
    print(f"Mean: {series_1d.mean()}")
    print(f"Median: {series_1d.median()}")
    print(f"Min: {series_1d.min()}")
    print(f"Max: {series_1d.max()}")
    print(f"Standard Deviation: {series_1d.std()}")
    print(f"Variance: {series_1d.var()}")
    print(f"Mean Absolute Deviation: {series_1d.mad()}")
    print(f"Product: {series_1d.prod()}")
    print(f"Sum: {series_1d.sum()}")

# 2D Data Aggregation
def two_dimensional_aggregation():
    # Generate a 2D array (5x5 matrix) of random values between 0 and 10
    data_2d = np.random.uniform(0, 10, (5, 5))

    # Create a pandas DataFrame
    df_2d = pd.DataFrame(data_2d)

    # Applying aggregation functions
    print("\n2D Data Aggregation:")
    print(f"Count (per column):\n{df_2d.count()}")
    print(f"First (per column):\n{df_2d.first()}")
    print(f"Last (per column):\n{df_2d.last()}")
    print(f"Mean (per column):\n{df_2d.mean()}")
    print(f"Median (per column):\n{df_2d.median()}")
    print(f"Min (per column):\n{df_2d.min()}")
    print(f"Max (per column):\n{df_2d.max()}")
    print(f"Standard Deviation (per column):\n{df_2d.std()}")
    print(f"Variance (per column):\n{df_2d.var()}")
    print(f"Mean Absolute Deviation (per column):\n{df_2d.mad()}")
    print(f"Product (per column):\n{df_2d.prod()}")
    print(f"Sum (per column):\n{df_2d.sum()}")

    # Aggregating across rows (axis=1)
    print("\nAggregation across rows (axis=1):")
    print(f"Mean (across rows):\n{df_2d.mean(axis=1)}")
    print(f"Sum (across rows):\n{df_2d.sum(axis=1)}")
    print(f"Min (across rows):\n{df_2d.min(axis=1)}")
    print(f"Max (across rows):\n{df_2d.max(axis=1)}")

# n-D Data Aggregation
def n_dimensional_aggregation():
    # Generate a 3D array (2x3x4) of random values between 0 and 10
    data_nd = np.random.uniform(0, 10, (2, 3, 4))

    # Apply aggregation functions to 3D data along different axes
    print("\nn-Dimensional (3D) Data Aggregation:")
    print(f"Mean along axis 0:\n{np.mean(data_nd, axis=0)}")
    print(f"Mean along axis 1:\n{np.mean(data_nd, axis=1)}")
    print(f"Mean along axis 2:\n{np.mean(data_nd, axis=2)}")

    print(f"Sum along axis 0:\n{np.sum(data_nd, axis=0)}")
    print(f"Sum along axis 1:\n{np.sum(data_nd, axis=1)}")
    print(f"Sum along axis 2:\n{np.sum(data_nd, axis=2)}")

    print(f"Min along axis 0:\n{np.min(data_nd, axis=0)}")
    print(f"Min along axis 1:\n{np.min(data_nd, axis=1)}")
    print(f"Min along axis 2:\n{np.min(data_nd, axis=2)}")

    print(f"Max along axis 0:\n{np.max(data_nd, axis=0)}")
    print(f"Max along axis 1:\n{np.max(data_nd, axis=1)}")
    print(f"Max along axis 2:\n{np.max(data_nd, axis=2)}")

# Run the aggregation functions
one_dimensional_aggregation()
two_dimensional_aggregation()
n_dimensional_aggregation()
